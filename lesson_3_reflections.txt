When would you want to use a remote repository rather than keeping all your work
local?

    You would want to use a remote repository for several reasons. You may be
    working on a project with another person, where you both share the repository.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Let's say you and your teammate are working independently on separate files
    and your teammate pushes her commits to GitHub. If Git automatically stays
    up-to-date with your remote repository, the files on your local repository
    may be overwritten and you may lose all the work you have done.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks and clones are very similar in nature. The only difference is where
    the copies of the repositories are being stored. Forking a repository
    saves a copy of that repository to your personal GitHub page. Cloning
    a repository stores a copy to your local repository. A branch is essentially
    a pointer linking your various commits. Most repositories start with a master
    branch, and every time you add a commit, a new pointer is added to the master
    linking the most recent commit and the previous commit. You would want to add
    a new branch if you do not want to replace your master, but still want to 
    make changes to your repository such as changing the language or adding a new
    feature to a game.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Locally storing a copy of the last known remote state can come in helpful
    in cases of conflict. If my teammate makes a commit to a file while I am
    working on a previous commit, I would not want to push my commit and
    overwrite the work my teammate has done. By having a copy of the remote
    stored locally, I can ensure I am working on the most current version
    of my program.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without using Git or GitHub, I would have to rely on alternative methods
    of collaboration such as: email, Slack, and Google Drive. If I were sharing
    different versions of code, I would also need to be sure to overly comment
    my code so any changes I made were apparent. Instant communication would be
    a bit easier, but actually highlighting the changes that were made would be
    much more difficult without Git or GitHub.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You would want to make changes in a separate branch if you are submitting
    a pull request. You need to stay up to date with the changes others are making,
    so making changes into a separate branch first before merging with the master
    helps prevent writing over other team members' changes.
